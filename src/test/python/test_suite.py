from Target import Target, ReplayTest, TargetRunProperties, ReplayTestOptions
from configEnum import buildSystem, TestResult, StartMode

class ReplayTestSuite:
    def __init__(self):
        pass

    # Note : Run non docker tests first
    def get_replay_test_suite(self):
        target_list = [
        # unlogged-spring-mvc-maven-demo - main (java 17)
        Target(
            "https://github.com/unloggedio/unlogged-spring-mvc-maven-demo",
            "unlogged-spring-mvc-maven-demo",
            "/pom.xml",
            "/src/main/java/org/unlogged/mvc/demo/Application.java",
            buildSystem.MAVEN,
            target_run_properties = TargetRunProperties("main","17", StartMode.CMD),
            replay_test_options= ReplayTestOptions(
                [
                    ReplayTest("loadAllBooks - normal", TestResult.PASS),
                    ReplayTest("getBookById - normal", TestResult.PASS),
                    ReplayTest("getAllBooks - normal", TestResult.PASS),
                    ReplayTest("insertBook - normal", TestResult.PASS),
                    ReplayTest("updateBook - normal", TestResult.PASS),
                    ReplayTest("deleteBook - normal", TestResult.PASS)
                ])
        ),
        # unlogged-spring-maven-demo - java 8
        Target(
            "https://github.com/unloggedio/unlogged-spring-maven-demo",
            "unlogged-spring-maven-demo",
            "/pom.xml",
            "/src/main/java/org/unlogged/demo/UnloggedDemoApplication.java",
            buildSystem.MAVEN,
            target_run_properties = TargetRunProperties("java8","8", StartMode.CMD),
            replay_test_options= ReplayTestOptions(
                [
                    ReplayTest("count_prime_calc saved on 2024-06-03 12:46", TestResult.PASS),
                    ReplayTest("filterList saved on 2024-06-03 12:44", TestResult.PASS),
                    ReplayTest("getLocationFromAddress saved on 2024-06-03 12:47", TestResult.PASS),
                    ReplayTest("fetchCustomerProfile saved on 2024-06-03 12:40", TestResult.PASS),
                    ReplayTest("CalculateScoreForCenosCustomer saved on 2024-06-03 12:47", TestResult.PASS),
                    ReplayTest("isCustomerEligibleForLoyaltyProgram saved on 2024-06-03 12:40", TestResult.PASS),
                    ReplayTest("generateReferralCode saved on 2024-06-03 12:47", TestResult.PASS),
                    ReplayTest("getDummyProfile saved on 2024-06-03 12:41", TestResult.PASS),
                    ReplayTest("getAbsoluteUrl saved on 2024-06-03 12:46", TestResult.PASS),
                    ReplayTest("getValue saved on 2024-06-03 12:49", TestResult.PASS),
                    ReplayTest("getFutureResultOptional saved on 2024-06-03 12:42", TestResult.PASS),
                    ReplayTest("fetchCustomerProfile saved on 2024-06-03 12:40", TestResult.PASS),
                    ReplayTest("saveCustomerProfile saved on 2024-06-03 12:39", TestResult.PASS),
                    ReplayTest("getUrl saved on 2024-06-03 12:46", TestResult.PASS),
                    ReplayTest("getSomeInt saved on 2024-06-03 12:44", TestResult.PASS),
                    ReplayTest("getScoreMaps saved on 2024-06-03 12:41", TestResult.PASS),
                    ReplayTest("getAddressbook saved on 2024-06-03 12:46", TestResult.PASS),
                    ReplayTest("save saved on 2024-06-03 12:39", TestResult.PASS),
                    ReplayTest("saveNewCustomer saved on 2024-06-03 12:39", TestResult.PASS),
                    ReplayTest("getLocationFromAddress saved on 2024-06-03 12:47", TestResult.PASS),
                    ReplayTest("getValue saved on 2024-06-03 12:50", TestResult.PASS),
                    ReplayTest("doSomething saved on 2024-06-03 12:42", TestResult.PASS),
                    ReplayTest("getBackProfile saved on 2024-06-03 12:41", TestResult.PASS),
                    ReplayTest("getFutureResult saved on 2024-06-03 12:42", TestResult.PASS),
                    ReplayTest("doSomething saved on 2024-06-03 12:49", TestResult.PASS),
                    ReplayTest("getTimeObjects saved on 2024-06-03 12:43", TestResult.PASS),
                    ReplayTest("getDummyScoreMaps saved on 2024-06-03 12:41", TestResult.PASS),
                    ReplayTest("calculateDiscount saved on 2024-06-03 12:48", TestResult.PASS),
                    ReplayTest("doSomethingOptional saved on 2024-06-03 12:42", TestResult.PASS),
                    ReplayTest("isCustomerEligibleForPremium saved on 2024-06-03 12:40", TestResult.PASS),
                    ReplayTest("getCustomerProfile saved on 2024-06-03 12:40", TestResult.PASS),
                    ReplayTest("getMapValue saved on 2024-06-03 12:43", TestResult.PASS)
                ])
        ),
        # unlogged-spring-maven-demo - java 21
        Target(
                "https://github.com/unloggedio/unlogged-spring-maven-demo",
                "unlogged-spring-maven-demo",
                "/pom.xml",
                "/src/main/java/org/unlogged/demo/UnloggedDemoApplication.java",
                buildSystem.MAVEN,
                target_run_properties = TargetRunProperties("java21-ci","21", StartMode.CMD),
                replay_test_options= ReplayTestOptions(
                    [
                        ReplayTest("networkintensive saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("saveNewCustomer saved on 2024-06-05 20:47", TestResult.PASS),
                        ReplayTest("doSomething saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("getSomeString saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getChar saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("filterList saved on 2024-06-05 11:21", TestResult.PASS),
                        ReplayTest("databaseintensive saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("getInt saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getResponse saved on 2024-06-05 21:55", TestResult.PASS),
                        ReplayTest("getL1Object saved on 2024-06-05 11:22", TestResult.PASS),
                        ReplayTest("getfloat saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("count_prime_calc saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("isCustomerEligibleForLoyaltyProgram saved on 2024-06-05 18:39", TestResult.PASS),
                        ReplayTest("saveUser saved on 2024-06-05 22:22", TestResult.PASS),
                        ReplayTest("addUser saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("save saved on 2024-06-05 11:45", TestResult.PASS),
                        ReplayTest("save saved on 2024-06-05 16:47", TestResult.PASS),
                        ReplayTest("cpu saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("removeCustomer saved on 2024-06-05 11:46", TestResult.PASS),
                        ReplayTest("getByName saved on 2024-06-18 17:20", TestResult.PASS),
                        ReplayTest("getULO saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("ping saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("getDeepReference saved on 2024-06-05 11:22", TestResult.PASS),
                        ReplayTest("sum_natural saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("getUser saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getCustomerProfile saved on 2024-06-05 20:54", TestResult.PASS),
                        ReplayTest("jodatest saved on 2024-06-05 22:23", TestResult.PASS),
                        ReplayTest("addUser saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getTimeObjects saved on 2024-06-05 20:40", TestResult.PASS),
                        ReplayTest("generateReferralForCustomer saved on 2024-06-05 11:45", TestResult.PASS),
                        ReplayTest("a saved on 2024-06-05 12:21", TestResult.PASS),
                        ReplayTest("many saved on 2024-06-05 12:21", TestResult.PASS),
                        ReplayTest("saveCustomerProfile saved on 2024-06-05 20:46", TestResult.PASS),
                        ReplayTest("isCustomerEligibleForPremium saved on 2024-06-05 19:02", TestResult.PASS),
                        ReplayTest("configureMapper saved on 2024-06-05 11:21", TestResult.PASS),
                        ReplayTest("getTestPojo saved on 2024-06-05 12:21", TestResult.PASS),
                        ReplayTest("isCustomerEligibleForLoyaltyProgram saved on 2024-06-05 21:51", TestResult.PASS),
                        ReplayTest("getBool saved on 2024-06-05 12:21", TestResult.PASS),
                        ReplayTest("getWeatherFor saved on 2024-06-05 21:59", TestResult.PASS),
                        ReplayTest("e saved on 2024-06-05 11:40", TestResult.PASS),
                        ReplayTest("loadUserByUsername saved on 2024-06-05 12:31", TestResult.PASS),
                        ReplayTest("methodA saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getlong saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("saveNewCustomer saved on 2024-06-05 11:42", TestResult.PASS),
                        ReplayTest("CalculateScoreForCenosCustomer saved on 2024-06-05 12:30", TestResult.PASS),
                        ReplayTest("serviceMethod saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("generateReferralCodes saved on 2024-06-05 20:47", TestResult.PASS),
                        ReplayTest("getScoreMaps saved on 2024-06-05 18:52", TestResult.PASS),
                        ReplayTest("generateNeReferralCode saved on 2024-06-05 21:49", TestResult.PASS),
                        ReplayTest("saveUser saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("saveUser saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("getE saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("fetchCustomerProfile saved on 2024-06-05 20:55", TestResult.PASS),
                        ReplayTest("fetchCustomerProfile saved on 2024-06-05 18:56", TestResult.PASS),
                        ReplayTest("getUrl saved on 2024-06-05 11:37", TestResult.PASS),
                        ReplayTest("getAllUsers saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("isCustomerEligibleForPremium saved on 2024-06-05 11:45", TestResult.PASS),
                        ReplayTest("getCustomerProfile saved on 2024-06-05 18:56", TestResult.PASS),
                        ReplayTest("removeCustomerProfile saved on 2024-06-05 22:13", TestResult.PASS),
                        ReplayTest("generateReferralCodes saved on 2024-06-05 16:47", TestResult.PASS),
                        ReplayTest("fetchCustomerProfile saved on 2024-06-05 18:56", TestResult.PASS),
                        ReplayTest("getULI saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("generateReferralForCustomer saved on 2024-06-05 19:03", TestResult.PASS),
                        ReplayTest("removeCustomerProfile saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("insertUser saved on 2024-06-18 16:52", TestResult.PASS),
                        ReplayTest("getWeatherinfo saved on 2024-06-05 11:47", TestResult.PASS),
                        ReplayTest("getNumber saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getWeatherinfo saved on 2024-06-05 11:48", TestResult.PASS),
                        ReplayTest("getValue saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("gcdOfTwoNumbers saved on 2024-06-05 11:47", TestResult.PASS),
                        ReplayTest("getbool saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getDummyScoreMaps saved on 2024-06-05 18:52", TestResult.PASS),
                        ReplayTest("e saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getdouble saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("removeCustomer saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("convertAddressBook saved on 2024-06-05 11:35", TestResult.PASS),
                        ReplayTest("memoryIntensive saved on 2024-06-05 11:31", TestResult.PASS),
                        ReplayTest("save saved on 2024-06-05 20:49", TestResult.PASS),
                        ReplayTest("getY saved on 2024-06-05 11:40", TestResult.PASS),
                        ReplayTest("saveCustomerProfile saved on 2024-06-05 16:47", TestResult.PASS),
                        ReplayTest("findAll saved on 2024-06-18 17:21", TestResult.PASS),
                        ReplayTest("removeCustomer saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("fetchCustomerProfile saved on 2024-06-05 20:55", TestResult.PASS),
                        ReplayTest("calculateDiscount saved on 2024-06-05 12:30", TestResult.PASS),
                        ReplayTest("generateNeReferralCode saved on 2024-06-05 19:00", TestResult.PASS),
                        ReplayTest("testFetchUser saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getObjectFor saved on 2024-06-05 11:48", TestResult.PASS),
                        ReplayTest("saveNewCustomer saved on 2024-06-05 16:47", TestResult.PASS),
                        ReplayTest("getDummyProfile saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("getMapValue saved on 2024-06-05 11:20", TestResult.PASS),
                        ReplayTest("getDeepClassList saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("doSomethingOptional saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("getGad saved on 2024-06-05 12:31", TestResult.PASS),
                        ReplayTest("getAddressbook saved on 2024-06-05 11:35", TestResult.PASS),
                        ReplayTest("removeCustomer saved on 2024-06-05 22:31", TestResult.PASS),
                        ReplayTest("getAbsoluteUrl saved on 2024-06-05 11:37", TestResult.PASS),
                        ReplayTest("getDeepClass saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("getint saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getAllUsers saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getFutureResult saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("getSomeInt saved on 2024-06-05 11:23", TestResult.PASS),
                        ReplayTest("generateReferralCode saved on 2024-06-05 20:48", TestResult.PASS),
                        ReplayTest("getFutureResultOptional saved on 2024-06-05 11:17", TestResult.PASS),
                        ReplayTest("save saved on 2024-06-05 11:42", TestResult.PASS),
                        ReplayTest("getWeatherForBangalore saved on 2024-06-05 21:57", TestResult.PASS),
                        ReplayTest("testEE saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("login saved on 2024-06-05 12:31", TestResult.PASS),
                        ReplayTest("findUserByEmail saved on 2024-06-05 12:31", TestResult.PASS),
                        ReplayTest("toJson saved on 2024-06-05 11:35", TestResult.PASS),
                        ReplayTest("getPojoF saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("getListofBigPojos saved on 2024-06-05 11:40", TestResult.PASS),
                        ReplayTest("methodIntTest saved on 2024-06-05 12:25", TestResult.PASS),
                        ReplayTest("save saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("convertFromJson saved on 2024-06-05 11:35", TestResult.PASS),
                        ReplayTest("generateReferralCode saved on 2024-06-05 18:33", TestResult.PASS),
                        ReplayTest("getTestText saved on 2024-06-05 12:20", TestResult.PASS),
                        ReplayTest("returnChar saved on 2024-06-05 11:21", TestResult.PASS),
                        ReplayTest("getBackProfile saved on 2024-06-05 11:17", TestResult.PASS)
            ])
        ),
            # unlogged-spring-webflux-maven-demo - 8
            Target(
                "https://github.com/unloggedio/unlogged-spring-webflux-maven-demo",
                "unlogged-spring-webflux-maven-demo",
                "/pom.xml",
                "/src/main/java/org/unlogged/springwebfluxdemo/SpringWebfluxDemoApplication.java",
                buildSystem.MAVEN,
                target_run_properties = TargetRunProperties("java8","8",StartMode.CMD),
                replay_test_options = ReplayTestOptions(
                    [
                        ReplayTest("mapAndFilter saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("nestedObservables saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("enrichDefaultPerson saved on 2024-04-02 16:07", TestResult.PASS),
                        ReplayTest("maybe3 saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("returnMonoErrorBasic saved on 2024-03-26 15:33", TestResult.PASS),
                        ReplayTest("getStringFromObservable saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("getCompletable saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("getFoodInfoProfileForUniversityNoEP saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:00", TestResult.PASS),
                        ReplayTest("saveStaff saved on 2024-03-28 13:59", TestResult.PASS),
                        ReplayTest("singleScheduler_happyPath", TestResult.PASS),
                        ReplayTest("scanObs saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("findStaffById saved on 2024-03-28 14:11", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 18:56", TestResult.PASS),
                        ReplayTest("connectableObs saved on 2024-03-28 12:55", TestResult.PASS),
                        ReplayTest("mergeComp1 saved on 2024-03-28 13:57", TestResult.PASS),
                        ReplayTest("getData1 saved on 2024-03-28 13:58", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:01", TestResult.PASS),
                        ReplayTest("all saved on 2024-03-28 14:13", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 19:01", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-04-02 17:24", TestResult.PASS),
                        ReplayTest("countAll saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("customBEScheduler_happyPath", TestResult.PASS),
                        ReplayTest("fluxListSubscribe_happyPath", TestResult.PASS),
                        ReplayTest("returnCustomExceptionFromMono saved on 2024-03-26 15:33", TestResult.PASS),
                        ReplayTest("parallelExecutor_happyPath", TestResult.PASS),
                        ReplayTest("groupByObs saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("getFoodProfileForUniversity saved on 2024-04-02 19:00", TestResult.PASS),
                        ReplayTest("fluxThrottling_happyPath", TestResult.PASS),
                        ReplayTest("getFoodInfoProfileForUniversity saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("coffeeFlixList saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("combineStreams_happyPath", TestResult.PASS),
                        ReplayTest("fromObs saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("fetchUrls_knownAssertionFailure", TestResult.PASS),
                        ReplayTest("returnMockString saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("findStaffById saved on 2024-03-28 13:59", TestResult.PASS),
                        ReplayTest("maybe2 saved on 2024-03-28 13:55", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 17:23", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("conditionals saved on 2024-03-28 12:53", TestResult.PASS),
                        ReplayTest("addPerson saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:00", TestResult.PASS),
                        ReplayTest("corsEnabledEndpoint saved on 2024-03-26 15:36", TestResult.PASS),
                        ReplayTest("shouldCreateNewDB saved on 2024-03-28 13:57", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("deleteStaff saved on 2024-03-28 14:12", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("concurrent_happyPath", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-03-28 14:13", TestResult.PASS),
                        ReplayTest("getObservableString saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("getUniversityV2Mono saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("getStaffForUniversity saved on 2024-03-28 14:11", TestResult.PASS),
                        ReplayTest("getListofStaffForUniversity saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("updateStaffNameForId saved on 2024-03-28 14:12", TestResult.PASS),
                        ReplayTest("resourceManagementExample saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("corsEnabledWithExtraAllowedOrigin saved on 2024-03-26 15:36", TestResult.PASS),
                        ReplayTest("comp1 saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 18:56", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-04-02 19:00", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 17:20", TestResult.PASS),
                        ReplayTest("executorBasedScheduler_happyPath", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("getFluxString_knownAssertionFailure", TestResult.PASS),
                        ReplayTest("flowable1 saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("boundedElasticScheduler_happyPath", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 17:25", TestResult.PASS),
                        ReplayTest("subjectObs saved on 2024-03-28 12:55", TestResult.PASS),
                        ReplayTest("processUrl_happyPath", TestResult.PASS),
                        ReplayTest("enrichDefaultPersonReactive - amg", TestResult.PASS),
                        ReplayTest("getFoodProfileForUniversity saved on 2024-04-02 17:24", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 17:23", TestResult.PASS),
                        ReplayTest("backPressure1_happyPath", TestResult.PASS),
                        ReplayTest("scheduleSubscribeOn_happyPath", TestResult.PASS),
                        ReplayTest("getMonostring saved on 2024-03-26 15:27", TestResult.PASS),
                        ReplayTest("fromFlowable saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("single saved on 2024-03-28 12:53", TestResult.PASS),
                        ReplayTest("immediateScheduler_happyPath", TestResult.PASS),
                        ReplayTest("notifyShopV1 saved on 2024-03-26 15:35", TestResult.PASS),
                        ReplayTest("backPressureBufferedStrat saved on 2024-03-28 12:58", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 18:59", TestResult.PASS)
                    ])
            ),
            # unlogged-spring-webflux-maven-demo - 11
            Target(
                "https://github.com/unloggedio/unlogged-spring-webflux-maven-demo",
                "unlogged-spring-webflux-maven-demo",
                "/pom.xml",
                "/src/main/java/org/unlogged/springwebfluxdemo/SpringWebfluxDemoApplication.java",
                buildSystem.MAVEN,
                target_run_properties = TargetRunProperties("java11","11",StartMode.CMD),
                replay_test_options = ReplayTestOptions(
                    [
                        ReplayTest("mapAndFilter saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("nestedObservables saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("enrichDefaultPerson saved on 2024-04-02 16:07", TestResult.PASS),
                        ReplayTest("maybe3 saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("returnMonoErrorBasic saved on 2024-03-26 15:33", TestResult.PASS),
                        ReplayTest("getStringFromObservable saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("getCompletable saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("getFoodInfoProfileForUniversityNoEP saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:00", TestResult.PASS),
                        ReplayTest("saveStaff saved on 2024-03-28 13:59", TestResult.PASS),
                        ReplayTest("singleScheduler_happyPath", TestResult.PASS),
                        ReplayTest("scanObs saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("findStaffById saved on 2024-03-28 14:11", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 18:56", TestResult.PASS),
                        ReplayTest("connectableObs saved on 2024-03-28 12:55", TestResult.PASS),
                        ReplayTest("mergeComp1 saved on 2024-03-28 13:57", TestResult.PASS),
                        ReplayTest("getData1 saved on 2024-03-28 13:58", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:01", TestResult.PASS),
                        ReplayTest("all saved on 2024-03-28 14:13", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 19:01", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-04-02 17:24", TestResult.PASS),
                        ReplayTest("countAll saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("customBEScheduler_happyPath", TestResult.PASS),
                        ReplayTest("fluxListSubscribe_happyPath", TestResult.PASS),
                        ReplayTest("returnCustomExceptionFromMono saved on 2024-03-26 15:33", TestResult.PASS),
                        ReplayTest("parallelExecutor_happyPath", TestResult.PASS),
                        ReplayTest("groupByObs saved on 2024-03-28 12:52", TestResult.PASS),
                        ReplayTest("getFoodProfileForUniversity saved on 2024-04-02 19:00", TestResult.PASS),
                        ReplayTest("fluxThrottling_happyPath", TestResult.PASS),
                        ReplayTest("getFoodInfoProfileForUniversity saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("coffeeFlixList saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("combineStreams_happyPath", TestResult.PASS),
                        ReplayTest("fromObs saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("fetchUrls_knownAssertionFailure", TestResult.PASS),
                        ReplayTest("returnMockString saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("findStaffById saved on 2024-03-28 13:59", TestResult.PASS),
                        ReplayTest("maybe2 saved on 2024-03-28 13:55", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 17:23", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("conditionals saved on 2024-03-28 12:53", TestResult.PASS),
                        ReplayTest("addPerson saved on 2024-03-26 15:40", TestResult.PASS),
                        ReplayTest("enrich saved on 2024-03-28 14:00", TestResult.PASS),
                        ReplayTest("corsEnabledEndpoint saved on 2024-03-26 15:36", TestResult.PASS),
                        ReplayTest("shouldCreateNewDB saved on 2024-03-28 13:57", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("deleteStaff saved on 2024-03-28 14:12", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("concurrent_happyPath", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-03-28 14:13", TestResult.PASS),
                        ReplayTest("getObservableString saved on 2024-03-28 12:51", TestResult.PASS),
                        ReplayTest("getUniversityV2Mono saved on 2024-04-02 18:58", TestResult.PASS),
                        ReplayTest("getStaffForUniversity saved on 2024-03-28 14:11", TestResult.PASS),
                        ReplayTest("getListofStaffForUniversity saved on 2024-04-02 18:57", TestResult.PASS),
                        ReplayTest("updateStaffNameForId saved on 2024-03-28 14:12", TestResult.PASS),
                        ReplayTest("resourceManagementExample saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("corsEnabledWithExtraAllowedOrigin saved on 2024-03-26 15:36", TestResult.PASS),
                        ReplayTest("comp1 saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("getCoffeeList saved on 2024-04-02 18:56", TestResult.PASS),
                        ReplayTest("getUniversityProfile saved on 2024-04-02 19:00", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 17:20", TestResult.PASS),
                        ReplayTest("executorBasedScheduler_happyPath", TestResult.PASS),
                        ReplayTest("getAllStaffNames saved on 2024-04-02 18:59", TestResult.PASS),
                        ReplayTest("getFluxString_knownAssertionFailure", TestResult.PASS),
                        ReplayTest("flowable1 saved on 2024-03-28 12:56", TestResult.PASS),
                        ReplayTest("boundedElasticScheduler_happyPath", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 17:25", TestResult.PASS),
                        ReplayTest("subjectObs saved on 2024-03-28 12:55", TestResult.PASS),
                        ReplayTest("processUrl_happyPath", TestResult.PASS),
                        ReplayTest("enrichDefaultPersonReactive - amg", TestResult.PASS),
                        ReplayTest("getFoodProfileForUniversity saved on 2024-04-02 17:24", TestResult.PASS),
                        ReplayTest("getStaffById saved on 2024-04-02 17:23", TestResult.PASS),
                        ReplayTest("backPressure1_happyPath", TestResult.PASS),
                        ReplayTest("scheduleSubscribeOn_happyPath", TestResult.PASS),
                        ReplayTest("getMonostring saved on 2024-03-26 15:27", TestResult.PASS),
                        ReplayTest("fromFlowable saved on 2024-03-28 13:56", TestResult.PASS),
                        ReplayTest("single saved on 2024-03-28 12:53", TestResult.PASS),
                        ReplayTest("immediateScheduler_happyPath", TestResult.PASS),
                        ReplayTest("notifyShopV1 saved on 2024-03-26 15:35", TestResult.PASS),
                        ReplayTest("backPressureBufferedStrat saved on 2024-03-28 12:58", TestResult.PASS),
                        ReplayTest("getUniversityV2 saved on 2024-04-02 18:59", TestResult.PASS)
                    ])
            ),
            # unlogged-spring-webflux-maven-demo - 21
            Target(
                "https://github.com/unloggedio/unlogged-spring-webflux-maven-demo",
                "unlogged-spring-webflux-maven-demo",
                "/pom.xml",
                "/src/main/java/org/unlogged/springwebfluxdemo/SpringWebfluxDemoApplication.java",
                buildSystem.MAVEN,
                target_run_properties = TargetRunProperties("java21","21",StartMode.CMD),
                replay_test_options = ReplayTestOptions(
                    [
                        ReplayTest("sumController saved on 2024-05-09 16:47", TestResult.PASS),
                        ReplayTest("sumController saved on 2024-05-10 13:37", TestResult.PASS),
                        ReplayTest("seqKeySetFromMap saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("lengthController saved on 2024-05-10 13:37", TestResult.PASS),
                        ReplayTest("getValue saved on 2024-05-13 16:23", TestResult.PASS),
                        ReplayTest("sumOfCoordinates saved on 2024-05-10 13:37", TestResult.PASS),
                        ReplayTest("seqMapSerialization saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("threadName saved on 2024-05-10 16:28", TestResult.PASS),
                        ReplayTest("seqSetUnmodifiable saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("seqSerialization saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("seqValueSetFromMap saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("lengthOfLine saved on 2024-05-10 13:37", TestResult.PASS),
                        ReplayTest("setValue saved on 2024-05-13 16:23", TestResult.PASS),
                        ReplayTest("calculate saved on 2024-05-10 16:02", TestResult.PASS),
                        ReplayTest("equalController saved on 2024-05-10 10:09", TestResult.PASS),
                        ReplayTest("seqMapUnModifiable saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("processRequest saved on 2024-05-10 16:28", TestResult.PASS),
                        ReplayTest("calculateYield saved on 2024-05-10 16:02", TestResult.PASS),
                        ReplayTest("checkEqualPoints saved on 2024-05-10 10:09", TestResult.PASS),
                        ReplayTest("seqSetSerialization saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("seqListUnmodifiable saved on 2024-05-09 16:07", TestResult.PASS),
                        ReplayTest("seqEntrySetFromMap saved on 2024-05-09 16:07", TestResult.PASS)
                    ])
            ),
            # unlogged-spring-webflux-maven-demo - 17
            Target(
            	"https://github.com/unloggedio/unlogged-spring-webflux-maven-demo",
            	"unlogged-spring-webflux-maven-demo",
            	"/pom.xml",
            	"/src/main/java/org/unlogged/springwebfluxdemo/SpringWebfluxDemoApplication.java",
            	buildSystem.MAVEN,
                target_run_properties = TargetRunProperties("main","17",StartMode.DOCKER),
                replay_test_options = ReplayTestOptions(
            	[
            		ReplayTest("VehicleComponent.getVehicles - normal", TestResult.PASS),
            		ReplayTest("CronController.cronHello - normal mockMode", TestResult.PASS),
            		ReplayTest("CronController.cronHello - normal integMode", TestResult.PASS),
            		ReplayTest("EnrichmentController.enrichPersonsInParallel - normal", TestResult.PASS),
            		ReplayTest("FluxOpsController.disposableExample - normal", TestResult.PASS),
            		ReplayTest("FluxOpsController.parallelFluxExample - normal", TestResult.PASS),
            		ReplayTest("FluxOpsController.tuple4Example - normal", TestResult.PASS),
            		ReplayTest("PlayerController.createPlayer - normal mockMode", TestResult.PASS),
            		ReplayTest("PlayerController.createPlayer - mock mismatch integrationMode", TestResult.PASS),
            		ReplayTest("PlayerController.deletePlayerById - normal mockMode", TestResult.PASS),
            		ReplayTest("PlayerController.deletePlayerById - normal integrationMode", TestResult.PASS),
            		ReplayTest("ProductController.getAllProducts - no class def", TestResult.PASS),
            		ReplayTest("ProductController.getProductById - no class def", TestResult.PASS),
            		ReplayTest("ProductController.updateProduct - no class def", TestResult.PASS),
            		ReplayTest("RecursiveController.nthFibonacci - normal", TestResult.PASS),
            		ReplayTest("RecursiveController.factorial - normal", TestResult.PASS),
                    ReplayTest("RedisOpsController.setValue - return value null", TestResult.PASS),
                    ReplayTest("RedisOpsController.getValue - logging.record event returns null", TestResult.PASS),
                    ReplayTest("SealedClassController.getAllVehicles2 - normal", TestResult.PASS),
                    ReplayTest("SealedClassController.getAllVehicles - normal", TestResult.PASS),
                    ReplayTest("UserController.deleteUser - normal", TestResult.PASS),
                    ReplayTest("UserController.updateUser - wrong assertion", TestResult.PASS),
                    ReplayTest("UserController.getUserById - wrong assertion", TestResult.PASS),
                    ReplayTest("VarKeywordController.getObjectArrayVar - assertion fail", TestResult.PASS),
                    ReplayTest("VarKeywordController.getStringVar - normal", TestResult.PASS),
                    ReplayTest("VarKeywordController.getCharVar - normal", TestResult.PASS),
                    ReplayTest("VarKeywordController.getIntegerArrayVar - normal", TestResult.PASS),
                    ReplayTest("ExternalUserController.deduct - normal", TestResult.PASS),
                    ReplayTest("ExternalUserController.deduct - normal", TestResult.PASS),
                    ReplayTest("InventoryController.deduct - normal", TestResult.PASS),
                    ReplayTest("InventoryController.deduct - normal", TestResult.PASS),
                    ReplayTest("ShippingController.schedule - normal", TestResult.PASS),
                    ReplayTest("ShippingController.schedule - normal", TestResult.PASS),
                    ReplayTest("InventoryClient.deduct - mock mismatch", TestResult.PASS),
                    ReplayTest("InventoryClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("ProductClient.getProduct - mock mismatch", TestResult.PASS),
                    ReplayTest("ProductClient.getProduct - mock mismatch integMode", TestResult.PASS),
                    ReplayTest("ShippingClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("ShippingClient.callShippingService - mock mismatch", TestResult.PASS),
                    ReplayTest("ShippingClient.callShippingService - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("ShippingClient.schedule - mock mismatch", TestResult.PASS),
                    ReplayTest("UserClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("UserClient.callUserService - mock mismatch", TestResult.PASS),
                    ReplayTest("UserClient.callUserService - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("UserClient.deduct - mock mismatch", TestResult.PASS),
                    ReplayTest("OrderController.placeOrder - mono is null", TestResult.PASS),
                    ReplayTest("OrderController.placeOrder - mono is null in integrationMode", TestResult.PASS),
                    ReplayTest("InventoryOrchestrator.isSuccess - normal", TestResult.PASS),
                    ReplayTest("InventoryOrchestrator.create - mock mismatch", TestResult.PASS),
                    ReplayTest("InventoryOrchestrator.create - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.toOrderResponse - normal", TestResult.PASS),
                    ReplayTest("OrchestratorService.toOrderResponse - normal integrationMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.doOrderPostProcessing - normal", TestResult.PASS),
                    ReplayTest("OrchestratorService.doOrderPostProcessing - normal integrationMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.getProduct - mock mismatch", TestResult.PASS),
                    ReplayTest("OrchestratorService.getProduct - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.placeOrder - mono is null", TestResult.PASS),
                    ReplayTest("OrderFulfillmentService.updateStatus - normal", TestResult.PASS),
                    ReplayTest("OrderFulfillmentService.placeOrder - mock mismatch", TestResult.PASS),
                    ReplayTest("PaymentOrchestrator.isSuccess - normal", TestResult.PASS),
                    ReplayTest("PaymentOrchestrator.create - mock mismatch", TestResult.PASS),
                    ReplayTest("PaymentOrchestrator.create - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("ShippingOrchestrator.isSuccess - normal", TestResult.PASS),
                    ReplayTest("ShippingOrchestrator.create - mock mismatch", TestResult.PASS),
                    ReplayTest("ShippingOrchestrator.create - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildPaymentRequest - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildInventoryRequest - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildShippingRequest - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildRequestContext - normal", TestResult.PASS),
                    ReplayTest("InventoryClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("InventoryClient.callInventoryService - mock mismatch", TestResult.PASS),
                    ReplayTest("InventoryClient.callInventoryService - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("InventoryClient.deduct - mock mismatch", TestResult.PASS),
                    ReplayTest("ProductClient.getProduct - mock mismatch", TestResult.PASS),
                    ReplayTest("ProductClient.getProduct - mock mismatch integrationMode", TestResult.PASS),
                    ReplayTest("ShippingClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("ShippingClient.callShippingService - fail", TestResult.FAIL),
                    ReplayTest("ShippingClient.callShippingService - fail integrationMode", TestResult.FAIL),
                    ReplayTest("ShippingClient.schedule - fail", TestResult.FAIL),
                    ReplayTest("UserClient.buildErrorResponse - normal", TestResult.PASS),
                    ReplayTest("UserClient.callUserService - fail", TestResult.FAIL),
                    ReplayTest("UserClient.UserService - fail integrationMode", TestResult.FAIL),
                    ReplayTest("UserClient.deduct - fail", TestResult.FAIL),
                    ReplayTest("OrderController.placeOrder - fail", TestResult.FAIL),
                    ReplayTest("OrderController.placeOrder - fail integrationMode", TestResult.FAIL),
                    ReplayTest("InventoryOrchestrator.isSuccess - success", TestResult.PASS),
                    ReplayTest("InventoryOrchestrator.create - null exception", TestResult.PASS),
                    ReplayTest("InventoryOrchestrator.create - null exception integrationMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.toOrderResponse - normal", TestResult.PASS),
                    ReplayTest("OrchestratorService.toOrderResponse - normal integMode", TestResult.PASS),
                    ReplayTest("OrchestratorService.doOrderPostProcessing - fail", TestResult.FAIL),
                    ReplayTest("OrchestratorService.doOrderPostProcessing - fail integrationMode", TestResult.FAIL),
                    ReplayTest("OrchestratorService.placeOrder - fail", TestResult.FAIL),
                    ReplayTest("OrderFulfillmentService.getProduct - fail", TestResult.FAIL),
                    ReplayTest("OrderFulfillmentService.getProduct - fail", TestResult.FAIL),
                    ReplayTest("OrderFulfillmentService.placeOrder - fail", TestResult.FAIL),
                    ReplayTest("PaymentOrchestrator.isSuccess - normal", TestResult.PASS),
                    ReplayTest("PaymentOrchestrator.create - fail", TestResult.FAIL),
                    ReplayTest("PaymentOrchestrator.create - fail", TestResult.FAIL),
                    ReplayTest("ShippingOrchestrator.isSuccess - normal", TestResult.PASS),
                    ReplayTest("ShippingOrchestrator.create - fail", TestResult.FAIL),
                    ReplayTest("ShippingOrchestrator.create - fail", TestResult.FAIL),
                    ReplayTest("DebugUtil.print - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildShippingRequest - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.InventoryRequest - normal", TestResult.PASS),
                    ReplayTest("OrchestrationUtil.buildPaymentRequest - normal", TestResult.PASS),
                    ReplayTest("BlueDartClient.getServiceOptions - fail", TestResult.FAIL),
                    ReplayTest("BlueDartClient.getServiceOptions - fail integrationMode", TestResult.FAIL),
                    ReplayTest("DHLClient.getServiceOptions - fail", TestResult.FAIL),
                    ReplayTest("DHLClient.getServiceOptions - fail integrationMode", TestResult.FAIL),
                    ReplayTest("DHLClient.normalizeResponse - normal", TestResult.PASS),
                    ReplayTest("CarrierController.getCarriers - fail", TestResult.FAIL),
                    ReplayTest("CarrierController.getCarriers - fail integrationMode", TestResult.FAIL),
                    ReplayTest("MockBlueDartController.createResponse - fail", TestResult.FAIL),
                    ReplayTest("MockBlueDartController.createResponse - fail", TestResult.FAIL),
                    ReplayTest("MockBlueDartController.getServiceOptions - fail to parse", TestResult.FAIL),
                    ReplayTest("MockDHLController.getServiceOptions - fail", TestResult.FAIL),
                    ReplayTest("MockDHLController.responseList - fail", TestResult.FAIL),
                    ReplayTest("CarrierService.getCarriers - fail", TestResult.FAIL),
                    ReplayTest("CarrierService.getCarriers - fail integrationMode", TestResult.FAIL),
                    ReplayTest("TeacherController.getAllTeachers - normal", TestResult.PASS),
                    ReplayTest("TeacherController.getAllTeachers - normal integ", TestResult.PASS),
                    ReplayTest("getTeacherById_mockMode_happyPath", TestResult.PASS),
                    ReplayTest("TeacherController.getTeacherById - normal integ", TestResult.PASS),
                    ReplayTest("ContentEnrichmentService.getAllTeachers - normal", TestResult.PASS),
                    ReplayTest("ContentEnrichmentService.enrichTeacherDetails - normal", TestResult.PASS),
                    ReplayTest("RestaurantClient.getRestaurant - connection refused", TestResult.PASS),
                    ReplayTest("ReviewClient.getReviews - connection refused", TestResult.PASS),
                    ReplayTest("BulkHeadController.nonCPUIntensiveTask - normal", TestResult.PASS),
                    ReplayTest("BulkHeadController.fib - normal", TestResult.PASS),
                    ReplayTest("CalculatorController.doubleInput - normal", TestResult.PASS),
                    ReplayTest("RestaurantAggregatorController.getProductAggregate - connection refused", TestResult.PASS),
                    ReplayTest("MockRestaurantController.getRestaurant - normal", TestResult.PASS),
                    ReplayTest("MockReviewController.getReviews - normal", TestResult.PASS),
                    ReplayTest("RestaurantAggregatorService.aggregate - connection refused", TestResult.PASS),
                    ReplayTest("CronService.getCount- normal", TestResult.PASS),
                    ReplayTest("CronService.executeTask - normal", TestResult.PASS),
                    ReplayTest("PlayerService.createPlayer - fail", TestResult.FAIL),
                    ReplayTest("PlayerService.createPlayer - fail integration", TestResult.FAIL),
                    ReplayTest("PlayerService.deletePlayerById - normal", TestResult.PASS),
                    ReplayTest("PlayerService.deletePlayerById - normal integrationMode", TestResult.PASS),
                    ReplayTest("ProductService.getAllProducts - no class def", TestResult.PASS),
                    ReplayTest("ProductService.getProductById - no class def", TestResult.PASS),
                    ReplayTest("ProductService.updateProduct - no class def", TestResult.PASS),
                    ReplayTest("RecursiveService.nthFibonacci - normal", TestResult.PASS),
                    ReplayTest("RecursiveService.fibonacci - normal", TestResult.PASS),
                    ReplayTest("RecursiveService.factorial - normal", TestResult.PASS),
                    ReplayTest("UserService.deleteUser - fail with null character", TestResult.FAIL),
                    ReplayTest("UserService.updateUser - fail with null character", TestResult.FAIL),
                    ReplayTest("UserService.getUserById - fail with null character", TestResult.FAIL),
                    ReplayTest("userEntityToUserDto_mockMode_unexpectedFailure", TestResult.PASS),
                    ReplayTest("userEntityToUserDto_integrationMode_happyPath", TestResult.PASS),
                    ReplayTest("userDtoToUserEntity_mockMode_unexpectedFailure", TestResult.PASS),
                    ReplayTest("userDtoToUserEntity_integrationMode_happyPath", TestResult.PASS),
                    ReplayTest("VarKeywordController.getObjectVar - normal", TestResult.PASS),
                    ReplayTest("ExternalProductController.getProduct - normal", TestResult.PASS),
                    ReplayTest("Orchestrator.statusHandler - normal", TestResult.PASS)
            	])
            ),
        # unlogged-spring-maven-demo - main (java 17)
        Target(
            "https://github.com/unloggedio/unlogged-spring-maven-demo",
            "unlogged-spring-maven-demo",
            "/pom.xml",
            "/src/main/java/org/unlogged/demo/UnloggedDemoApplication.java",
            buildSystem.MAVEN,
            target_run_properties = TargetRunProperties("main","17", StartMode.DOCKER),
            replay_test_options= ReplayTestOptions(
                [
                    ReplayTest("org.unlogged.demo.controller.CustomerController.saveCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.CustomerController.removeCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.CustomerController.generateNeReferralCode - normal",
                               TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.controller.CustomerController.isCustomerEligibleForLoyaltyProgram - normal",
                        TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.CustomerController.getDummyProfile - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.CustomerController.getScoreMaps - normal", TestResult.PASS),
                    ReplayTest("FutureController.getFutureResult - normal", TestResult.PASS),
                    ReplayTest("FutureController.getFutureResultOptional - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.GreetingController.getGreeting - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.InternalClassController.getL1Object - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.InternalClassController.getMapValue - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.InternalClassController.getTimeObjects - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.InternalClassController.returnChar - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.InternalClassController.cmm - normal", TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getDefaultModel - normal", TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getUserModelMiniDto - normal", TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getUserModelMiniDto - call from ModelMapper mocked",
                               TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getUserModelDto - normal", TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getUserModelDtoWithProvider - normal", TestResult.PASS),
                    ReplayTest("ModelMapperOpsController.getFromConverter - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.insertDefault - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.insertNew - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.getall - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.getById - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.updatePojo - normal", TestResult.PASS),
                    ReplayTest("MongoOpsController.deleteById - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.getDefaultUser - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.getEmptyOptionalUser - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.create1 - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.createNullable - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.getPresentStatus - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.getEmptyStatus - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.ifPresent - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.orElseCase - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.orElseGet - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.getUserUsage - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.filterUserOptional - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.countNameLength - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.flatMapUsage - normal", TestResult.PASS),
                    ReplayTest("OptionalOpsController.chain - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.RecursionController.getIsPalindrome - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.RecursionController.getFibonacciSeries - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.RecursionController.isPalindrome - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.RecursionController.factorial - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ResponseEntityOps.getOkString - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ResponseEntityOps.getOkUser - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ResponseEntityOps.getUserOf - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ResponseEntityOps.createWithCode - normal", TestResult.PASS),
                    ReplayTest("SealedOpsController.getSquare - normal", TestResult.PASS),
                    ReplayTest("SealedOpsController.shapeSerial - normal", TestResult.PASS),
                    ReplayTest("SealedOpsController.getRectangle - normal", TestResult.PASS),
                    ReplayTest("SealedOpsController.getFilledRectangle - normal", TestResult.PASS),
                    ReplayTest("SealedOpsController.getCircle - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.getUserGroups - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.getUserList - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.forEachRun - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.forEachRunParallel - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.mapAndCollect - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.mapSet - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.mapVector - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.mapAndFilter - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.filterAndFindFirst - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.toArrayCollection_Usernames - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.flatmap_maxId - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.flatmap_minId - normal4", TestResult.PASS),
                    ReplayTest("StreamOpsController.peek_all - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.countUsersInGroups - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.limitUsers - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.distinctUsage - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.matchCases - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.reduceUsage - normal", TestResult.PASS),
                    ReplayTest("StreamOpsController.getSortedIdOrder - normal missing symbols", TestResult.PASS),
                    ReplayTest("StreamOpsController.groupBy - normal", TestResult.PASS),
                    ReplayTest("ThreadingOpsController.executorServiceCallablesAny - normal", TestResult.PASS),
                    ReplayTest("ThreadingOpsController.executorServiceRunnable - normal", TestResult.PASS),
                    ReplayTest("ThreadingOpsController.scheduledThread - normal", TestResult.PASS),
                    ReplayTest("ThreadingOpsController.scheduledThreadFixedRate - normal", TestResult.PASS),
                    ReplayTest("ThreadingOpsController.scheduledThreadFixedDelay - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ValidatorOpsController.isDefaultUserVaild - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ValidatorOpsController.isUserValid - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ValidatorOpsController.getValidUser - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.ValidatorOpsController.validateUserV2 - normal",
                               TestResult.PASS),
                    ReplayTest("VarOpsController.primitivesWrapped - normal", TestResult.PASS),
                    ReplayTest("VarOpsController.getAUser - normal", TestResult.PASS),
                    ReplayTest("VarOpsController.varListAndMap - normal", TestResult.PASS),
                    ReplayTest("VarOpsController.getAsResponseEntity - normal", TestResult.PASS),
                    ReplayTest("VarOpsController.getCustomers - normal", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.findAll - normal", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.findById - normal mocked", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.findById - normal integration", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.deleteById - normal mocked", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.deleteById - normal integration", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.insertNew - normal mocked", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.insertNew - normal integration", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.update - normal mocked", TestResult.PASS),
                    ReplayTest("PropertyControllerImpl.update - normal integration", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.controller.lcc.getSomeInt - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.cron.ScheduledJobs.scheduleFixedDelayTask - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.cron.ScheduledJobs.cron1 - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.cron.ScheduledJobs.cron2Greet - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.CustomObjectInputFilter.checkInput - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.CustomObjectInputFilter.checkInput - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.CustomObjectInputFilter.checkInput - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.CustomObjectInputFilter.checkInput - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.CustomObjectInputFilter.checkInput - normal",
                               TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectWithMergedFilters - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectNotAllowed - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectWithRejectFilter - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectUndecided - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObject1 - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectWithAllowFilter - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.deserializationfilter.DeserializationController.deserializeObjectRejectUndecided - normal",
                        TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.DeserializationController.serializeObject - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.DeserializationController.serializeObject - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.DeserializationController.serializeObject - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.deserializationfilter.DeserializationController.serializeObject - normal",
                               TestResult.PASS),
                    ReplayTest("GlobalFilter.getGlobalFilterAdditive - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ApiHelper.WeatherApi.getWeatherinfo - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.Alpha.getY - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.Beta.e - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.BigObjController.getListofBigPojos - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.BigObjController.getOrderedList - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.saveCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.getCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.removeCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.addNewContactNumber - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.generateNeReferralCode - normal",
                               TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.jspdemo.wfm.Controllers.CustomerRes.isCustomerEligibleForLoyaltyProgram - normal",
                        TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.GcdController.gcdOfTwoNumbers - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.GcdController.getNull - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.ThirdPartyController.getResponse - normal",
                               TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.jspdemo.wfm.Controllers.ThirdPartyController.getWeatherForBangalore - normal",
                        TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.getBool - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.a - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.getTestPojo - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.jodatest - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.getInstant - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.getDeepClass - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.getTestText - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.saveUser - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.saveUser - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Controllers.UserController.testFetchUser - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.fetchCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Dao.CustomerProfileDao.removeCustomer - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ReferralUtils.generateReferralCode - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.SerializationUtils.getObjectFor - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.SerializationUtils.getObjectFor - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.CustomerService.generateReferralCodes - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.CustomerService.saveNewCustomer - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.CustomerService.fetchCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.CustomerService.removeCustomer - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.CustomerService.addNewContact - normal",
                               TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.jspdemo.wfm.Services.CustomerService.generateReferralForCustomer - normal",
                        TestResult.PASS),
                    ReplayTest(
                        "org.unlogged.demo.jspdemo.wfm.Services.CustomerService.isCustomerEligibleForPremium - normal",
                        TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.UserService.many - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.UserService.getDeepClassList - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.Services.UserService.getUser - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ThirdPartyApiHelper.getWeatherinfo - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ThirdPartyApiHelper.getWeatherinfo - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ThirdPartyService.getWeatherFor - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.ThirdPartyService.getWeatherFor - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.UserInstanceDao.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.jspdemo.wfm.UserInstanceService.saveUser - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.repository.CustomerProfileRepository.save - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.repository.CustomerProfileRepository.removeCustomer - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.repository.CustomerProfileRepository.fetchCustomerProfile - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.resttemplate.PostController.getPostById - unexpected failure",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.resttemplate.PostsClient.findById - wrong assertions with extra char",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.generateReferralCodes - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.saveNewCustomer - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.removeCustomer - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.generateReferralForCustomer - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.isCustomerEligibleForPremium - normal",
                               TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.getBackProfile - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.CustomerService.getDummyScoreMaps - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.DeepService.getDeepReference - normal", TestResult.PASS),
                    ReplayTest("FutureService.doSomething - normal", TestResult.PASS),
                    ReplayTest("FutureService.doSomethingOptional - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.WeatherService.getWeatherinfo - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.WeatherService.getWeatherForAddress - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.service.WeatherService.convertToObject - normal", TestResult.PASS),
                    ReplayTest("PropertyServiceCEImpl.getAll - normal", TestResult.PASS),
                    ReplayTest("PropertyServiceCEImpl.getById - normal", TestResult.PASS),
                    ReplayTest("PropertyServiceCEImpl.deleteById - normal", TestResult.PASS),
                    ReplayTest("PropertyServiceCEImpl.insertNew - normal", TestResult.PASS),
                    ReplayTest("PropertyServiceCEImpl.updateExisting - normal", TestResult.PASS),
                    ReplayTest("org.unlogged.demo.utils.ReferralUtils.generateReferralCode - normal", TestResult.PASS),
                    ReplayTest("ClassUserController.setAndGetUser - recursive setter bug freq logging", TestResult.PASS)
                ])
        )
    ]
        return target_list
